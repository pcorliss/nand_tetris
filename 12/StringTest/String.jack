// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field int length, end;
    field Array chars;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
      let length = maxLength;
      if(maxLength > 0){
        let chars = Array.new(length);
      }
      let end = 0;
      return this;
    }

    /** Disposes this string. */
    method void dispose() {
      if(length > 0){
        do chars.dispose();
      }
      return;
    }

    /** Returns the current length of this string. */
    method int length() {
      return end;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
      return chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
      let chars[j] = c;
      let end = j + 1;
      return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
      do setCharAt(end, c);
      return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
      let end = end - 1;
      return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
      var int i, j, sum, c, mult;
      var boolean negative;
      var Array ints;

      let i = 0;
      let negative = false;
      let ints = Array.new(end);
      let j = 0;
      let mult = 1;
      while(i < end){
        let c = charAt(i);
        if(((c < 58) & (c > 47)) | (c = 45)){
          if(c = 45){
            let negative = true;
          } else {
            let ints[j] = c - 48;
            let j = j + 1;
            let mult = mult * 10;
          }
        } else {
          return sum;
        }
        let i = i + 1;
      }

      let i = 0;
      let sum = 0;
      while(i < j){
        let sum = sum + (ints[i] * mult);
        let mult = mult / 10;
        let i = i + 1;
      }

      if(negative){
        return -sum;
      }
      return sum;
    }

    // modulus or % operator
    function int modulus(int x, int y) {
      return (x - ((x/y) * y));
    }

    method void setIntWithIdx(int i) {
      if(i < 0){
        do appendChar(45);
        let i = -i;
      }

      if(i > 9){
        // we need to print the biggest digit first
        // recursive call here to accomplish that
        do setIntWithIdx(i / 10);
        do appendChar(String.modulus(i ,10) + 48);
      } else {
        do appendChar(i + 48);
      }

      return;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int i) {
      let end = 0;
      do setIntWithIdx(i);

      return;
    }

    /** Returns the new line character. */
    function char newLine() {
      return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
      return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
      return 34;
    }
}
