// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram, freeList;
    static int next, size;

    /** Initializes the class. */
    function void init() {
      let ram = 0;
      let next = 0;
      let size = 1;
      let freeList = 2048;
      let freeList[next] = 0;
      let freeList[size] = 16384 - freeList - 1; // 14335

      return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
      return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
      let ram[address] = value;
      return;
    }

    function Array firstFit(int requestedSize) {
      var Array segment;
      let segment = freeList;

      while(segment[size] < requestedSize){
        let segment = freeList[next];
        if (segment = 0) { return 0; }
      }
      return segment;
    }

    // smallest fit
    function int bestFit(int requestedSize) {
      var Array segment, smallest;
      let smallest = freeList;
      let segment = freeList;
      while(~(segment[next] = 0)){
        // segment.size < smallest.size & segment.size >= requestedSize
        if ((segment[size] < smallest[size]) & (~(segment[size] < requestedSize))) {
          let smallest = segment;
        }
        let segment = segment[next];
      }
      return smallest;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int requestedSize) {
      var Array segment, block;
      var int remainingSize;

      let segment = Memory.bestFit(requestedSize + 2);
      if (segment = 0) { return 0; }

      // there's a subtle bug here where we're leaking some allocated memory
      // leaving small blocks with ever shrinking sizes
      let remainingSize = segment[size] - (requestedSize + 2);

      let block = (segment + 2 + segment[size]) - (requestedSize + 2);
      let block[size] = requestedSize;

      let segment[size] = remainingSize;

      return block + 2;
      /*return 2048;*/
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
      var Array segment;

      let segment = freeList;
      while(~(segment[next] = 0)){
        let segment = segment[next];
      }

      let segment[next] = o - 2;
      return;
    }
}
