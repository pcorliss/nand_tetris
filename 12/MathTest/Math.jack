// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {

    /** Initializes the library. */
    function void init() {
      return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
      if (x < 0) {
        return -x;
      }
      return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
      var int i, out, negs, x_p, y_p;
      let i = 0;
      let out = 0;
      let negs = 0;
      let x_p = x;
      let y_p = y;

      if(x < 0) {
        let negs = negs + 1;
        let x_p = -x;
      }
      if(y < 0) {
        let negs = negs + 1;
        let y_p = -y;
      }

      while(i < x_p) {
        let out = out + y_p;
        let i = i + 1;
      }

      if(negs = 1) {
        return -out;
      }
      return out;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
      var int q, neg;
      let neg = 0;
      if(y < 0){ let neg = neg + 1;}
      if(x < 0){ let neg = neg + 1;}

      if (neg = 1) {
        let neg = -1;
      } else {
        let neg = 1;
      }

      let x = Math.abs(x);
      let y = Math.abs(y);

      if (y > x) {
        return 0;
      }

      let q = x / (y + y);
      if ( ( x - ( (q + q) * y ) ) < y ) {
        return 2*q*neg;
      } else {
        return (2*q*neg) + 1;
      }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
      var int y;

      let y = 0;
      while(y < 182){
        if(y * y > x){
          return y - 1;
        }
        if(y * y = x) {
          return y;
        }

        let y = y + 1;
      }
      return y - 1;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
      if (a > b) {
        return a;
      }
      return b;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
      if (a < b) {
        return a;
      }
      return b;
    }
}
