// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // instruction[15] is 1 - A Instruction
    // instruction[15] is 0 - C Instruction (ALU In)
    // Do I need to do something extra here for A/C instructions?
    // What about instruction[14] and [13] ??
    Mux16(a=aluOut, b=instruction, sel=instruction[15], out=aReg);

    ARegister(in=aReg, load=instruction[5], out=aOut, out[0..14]=addressM); // d1 (A)

    DRegister(in=aluOut, load=instruction[4], out=dOut); // d2 (D) May require more bits
    // Wrong bit?
    Mux16(a=aReg, b=inM, sel=instruction[3], out=amReg); // d3 (M)

    // if (negative && j1) || (zero && j2) || (!zero && !negative && j3) then jump (load) else inc

// Not(in=zero, out=zeroNot);
// Not(in=neg, out=negativeNot);
// And(a=zeroNot,  b=negativeNot, out=pos);
//
// And(a=neg,  b=instruction[2], out=jlt); //j1, out < 0
// And(a=zero, b=instruction[1], out=jeq); //j2, out = 0
// And(a=pos,  b=instruction[0], out=jgt); //j3, out > 0
//
// Or(a=jlt, b=jeq, out=or1);
// Or(a=or1, b=jgt, out=jump);
// Need Extra instruction if it's a C instruction???
// Not(in=jump, out=inc);
//
// PC(in=aOut, load=jump, inc=inc, reset=reset, out[0..14]=pc);
//
   ALU(
     x=dOut, y=amReg,
     zx=instruction[11], // c1
     nx=instruction[10], // c2
     zy=instruction[9],  // c3
     ny=instruction[8],  // c4
     f=instruction[7],   // c5
     no=instruction[6],  // c6
     zr=zero, ng=neg, // to control logic
     out=outM, out=aluOut
   );
//
//  // d3 (M) - This hsould be a composite of d3 as well as something else
  And(a=instruction[3], b=true, out=writeM);
}
